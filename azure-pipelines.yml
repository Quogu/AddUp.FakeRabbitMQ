strategy:
  matrix:
    windows:
      imageName: 'windows-2019'
      rid: 'windows-x64'
    # linux:
    #   imageName: 'ubuntu-18.04'
    #   rid: 'linux-x64'
trigger:
  branches:
    include:
    - master
pool:
  vmImage: $(imageName)
variables:
  solution: 'src/AddUp.RabbitMQ.Fakes.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: sdk
    version: 3.0.100
    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: 'src'
    feedsToUse: 'config'
    nugetConfigPath: './nuget.config'
- task: SonarCloudPrepare@1
  displayName: 'Sonarcloud - Prepare'
  inputs:
    SonarCloud: 'Sonarcloud - addupsolutions-oss'
    organization: 'addupsolutions-oss'
    scannerMode: 'MSBuild'
    projectKey: 'addup-rabbitmq-fakes'
    projectName: 'AddUp.RabbitMQ.Fakes'
    projectVersion: '1.2'
    extraProperties: |
      # As per https://community.sonarsource.com/t/c-code-not-being-analyze-in-vsts-pipeline/18818/22
      # sonar.inclusions=src/**/AddUp.RabbitMQ.Fakes/*
      # sonar.test.inclusions=src/**/AddUp.RabbitMQ.Fakes.Tests/*
  condition: and(eq(variables['rid'], 'windows-x64'), eq(variables['buildConfiguration'], 'Release'))
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: 'src/**/*.sln'
    arguments: '-c $(buildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: 'Tests for Sonarcloud'
  inputs:
    command: 'test'
    projects: 'src/**/*.csproj'
    arguments: '-c $(buildConfiguration) --no-build --collect "Code Coverage"'
    testRunTitle: 'Unit Tests on $(rid) (Sonarcloud)'
  condition: and(eq(variables['rid'], 'windows-x64'), eq(variables['buildConfiguration'], 'Release'))
- task: DotNetCoreCLI@2
  displayName: 'Tests for Coverlet'
  inputs:
    command: 'test'
    projects: 'src'
    arguments: '-c $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage/'
    testRunTitle: 'Unit Tests on $(rid) (Coverlet)'
- task: SonarCloudAnalyze@1
  displayName: 'Sonarcloud - Analyze'
  condition: and(eq(variables['rid'], 'windows-x64'), eq(variables['buildConfiguration'], 'Release'))

# - task: CmdLine@2
#   inputs:
#     script: |
#       echo Write your commands here
      
#       echo Hello world

# - task: CmdLine@2
#   inputs:
#     script: |
#       echo BEG1
#       type D:/a/1/.sonarqube/conf/SonarQubeAnalysisConfig.xml
#       echo NEXT
#       type D:/a/1/.sonarqube/out/sonar-project.properties
#       echo NEXT
#       dir D:/a/1/TestResults
#       echo END1


- script: |
    echo BEG1
    type D:/a/1/.sonarqube/conf/SonarQubeAnalysisConfig.xml
    echo NEXT
    type D:/a/1/.sonarqube/out/sonar-project.properties
    echo NEXT
    dir D:/a/1/TestResults
    echo END1
  condition: succeededOrFailed()      

- task: SonarCloudPublish@1
  displayName: 'Sonarcloud - Publish'
  inputs:
    pollingTimeoutSec: '300'
  condition: and(eq(variables['rid'], 'windows-x64'), eq(variables['buildConfiguration'], 'Release'))
- task: Bash@3
  displayName: 'Upload Code Coverage Report'
  inputs:
    targetType: 'inline'
    script: |
      bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN) -v
  condition: eq(variables['rid'], 'linux-x64')
- task: CopyFiles@2
  displayName: Collect Nuget Packages
  inputs:
    SourceFolder: src/AddUp.RabbitMQ.Fakes/bin/$(buildConfiguration)/
    Contents: |
      *.nupkg
    TargetFolder: $(Build.ArtifactStagingDirectory)/Packages
  condition: and(eq(variables['rid'], 'windows-x64'), eq(variables['buildConfiguration'], 'Release'))
- task: PublishBuildArtifacts@1
  displayName: Publish Packages as Build Artifacts
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/Packages
    ArtifactName: Packages
    publishLocation: Container
  condition: and(eq(variables['rid'], 'windows-x64'), eq(variables['buildConfiguration'], 'Release'))